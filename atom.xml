<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CocoaWill]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://cocoawill.com/"/>
  <updated>2015-12-24T02:24:47.000Z</updated>
  <id>http://cocoawill.com/</id>
  
  <author>
    <name><![CDATA[William Chan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <link href="http://cocoawill.com/2015/12/24/git-command/"/>
    <id>http://cocoawill.com/2015/12/24/git-command/</id>
    <published>2015-12-24T02:19:53.000Z</published>
    <updated>2015-12-24T02:24:47.000Z</updated>
    <content type="html"><![CDATA[<p><strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。<br>笔记基本上整理自网站 <a href="https://try.github.io" target="_blank" rel="external">Try Git</a>，一套很不错的 Git 在线入门教程。</p>
<a id="more"></a>
<h2 id="git_init"><a href="#git_init" class="headerlink" title="git init"></a>git init</h2><p>To initialize a Git repository here</p>
<h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><ul>
<li>A folder used for storing multiple files.</li>
</ul>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><ul>
<li>A directory where Git has been initialized to start version controlling your files.</li>
</ul>
<h2 id="git_status"><a href="#git_status" class="headerlink" title="git status"></a>git status</h2><p>See what the current state of the project is.</p>
<h3 id="staged"><a href="#staged" class="headerlink" title="staged"></a>staged</h3><ul>
<li>Files are ready to be committed.<h3 id="unstaged"><a href="#unstaged" class="headerlink" title="unstaged"></a>unstaged</h3></li>
<li>Files with changes that have not been prepared to be committed.<h3 id="untracked"><a href="#untracked" class="headerlink" title="untracked"></a>untracked</h3></li>
<li>Files aren’t tracked by Git yet. This usually indicates a newly created file.<h3 id="deleted"><a href="#deleted" class="headerlink" title="deleted"></a>deleted</h3></li>
<li>File has been deleted and is waiting to be removed from Git.</li>
</ul>
<h2 id="git_add__26lt_3Bfile_26gt_3B"><a href="#git_add__26lt_3Bfile_26gt_3B" class="headerlink" title="git add &lt;file&gt;"></a>git add <code>&lt;file&gt;</code></h2><p>Add files to the staging area.</p>
<h3 id="Staging_Area"><a href="#Staging_Area" class="headerlink" title="Staging Area"></a>Staging Area</h3><ul>
<li>A place where we can group files together before we “commit” them to Git.<br>Commit</li>
</ul>
<h3 id="add_all"><a href="#add_all" class="headerlink" title="add all"></a>add all</h3><ul>
<li>You can also type <code>git add -A</code> . where the dot stands for the current directory, so everything in and beneath it is added. The <code>-A</code> ensures even file deletions are included.</li>
</ul>
<h2 id="git_reset"><a href="#git_reset" class="headerlink" title="git reset"></a>git reset</h2><p>You can use <code>git reset &lt;filename&gt;</code> to remove a file or files from the staging area.</p>
<h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><p>A “commit” is a snapshot of our repository. This way if we ever need to look back at the changes we’ve made (or if someone else does), we will see a nice timeline of all changes.</p>
<h3 id="git_commit_-m__u201Cmsg_u201D"><a href="#git_commit_-m__u201Cmsg_u201D" class="headerlink" title="git commit -m “msg”"></a>git commit -m “msg”</h3><ul>
<li>To store our staged changes we run the commit command with a message describing what we’ve changed. </li>
</ul>
<h3 id="u2018-a_u2019_option"><a href="#u2018-a_u2019_option" class="headerlink" title="‘-a’ option"></a>‘-a’ option</h3><ul>
<li>Auto removes deleted files with the commit.</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> commit -am <span class="string">"msg"</span></span><br></pre></td></tr></table></figure>
<h2 id="git_log"><a href="#git_log" class="headerlink" title="git log"></a>git log</h2><p>a journal that remembers all the changes we’ve committed so far</p>
<h3 id="git_log__u2013summary"><a href="#git_log__u2013summary" class="headerlink" title="git log –summary"></a>git log –summary</h3><ul>
<li>see more information for each commit. You can see where new files were added for the first time or where files were deleted. It’s a good overview of what’s going on in the project.</li>
</ul>
<h2 id="git_remote"><a href="#git_remote" class="headerlink" title="git remote"></a>git remote</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> &lt;remote name&gt; &lt;repository <span class="built_in">URL</span>&gt;</span><br><span class="line">git remote <span class="built_in">add</span> origin <span class="keyword">https</span>://github.com/<span class="keyword">try</span>-git/try_git.git</span><br></pre></td></tr></table></figure>
<p>Git doesn’t care what you name your remotes, but it’s typical to name your main one <code>origin</code>.</p>
<p>It’s also a good idea for your main repository to be on a remote server like GitHub in case your machine is lost at sea during a transatlantic boat cruise or crushed by three monkey statues during an earthquake.</p>
<h2 id="git_push"><a href="#git_push" class="headerlink" title="git push"></a>git push</h2><p>Tells Git where to put our commits when we’re ready.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">push </span>-u &lt;remote name&gt; &lt;<span class="keyword">branch </span>name&gt;</span><br><span class="line"><span class="label">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure>
<p>The <code>-u</code> tells Git to remember the parameters, so that next time we can simply run <code>git push</code>.</p>
<h2 id="git_stash"><a href="#git_stash" class="headerlink" title="git stash"></a>git stash</h2><p>Sometimes when you go to pull you may have changes you don’t want to commit just yet. One option you have, other than commiting, is to stash the changes.</p>
<p>Use the command <code>git stash</code> to stash your changes, and <code>git stash apply</code> to re-apply your changes after your pull.</p>
<h2 id="git_pull"><a href="#git_pull" class="headerlink" title="git pull"></a>git pull</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote <span class="property">name</span>&gt; &lt;branch <span class="property">name</span>&gt;</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>Check for changes on remote repository and pull down any new changes.</p>
<h2 id="git_diff"><a href="#git_diff" class="headerlink" title="git diff"></a>git diff</h2><p>A good overview of changes we have made and lets us add files or directories one at a time and commit them separately.</p>
<h3 id="git_diff_HEAD"><a href="#git_diff_HEAD" class="headerlink" title="git diff HEAD"></a>git diff HEAD</h3><ul>
<li>Show what is different from our last commit. <code>HEAD</code> points to your most recent commit by default.</li>
</ul>
<h3 id="git_diff__u2013staged"><a href="#git_diff__u2013staged" class="headerlink" title="git diff –staged"></a>git diff –staged</h3><ul>
<li>Look at changes within files that have already been staged.</li>
</ul>
<h2 id="git_checkout__u2013__26lt_3Btarget_26gt_3B"><a href="#git_checkout__u2013__26lt_3Btarget_26gt_3B" class="headerlink" title="git checkout – &lt;target&gt;"></a>git checkout – <code>&lt;target&gt;</code></h2><p>Changed files back to how they were at the last commit, namely get rid of all the changes since the last commit.</p>
<p><code>--</code>: promise the command line that there are no more options after the ‘–’, avoid switching to the branch of the same name.</p>
<h2 id="git_branch"><a href="#git_branch" class="headerlink" title="git branch"></a>git branch</h2><p>List local branches of now repository.</p>
<h3 id="git_branch__26lt_3Bname_26gt_3B"><a href="#git_branch__26lt_3Bname_26gt_3B" class="headerlink" title="git branch &lt;name&gt;"></a>git branch <code>&lt;name&gt;</code></h3><ul>
<li>Create a new branch.</li>
</ul>
<blockquote>
<p>When developers are working on a feature or bug they’ll often create a copy (aka. branch) of their code they can make separate commits to. Then when they’re done they can merge this branch back into their main master branch.</p>
</blockquote>
<h3 id="git_checkout__26lt_3Bbranch_26gt_3B"><a href="#git_checkout__26lt_3Bbranch_26gt_3B" class="headerlink" title="git checkout &lt;branch&gt;"></a>git checkout <code>&lt;branch&gt;</code></h3><ul>
<li>Switch to certain branch.</li>
</ul>
<h3 id="git_checkout_-b_new_branch"><a href="#git_checkout_-b_new_branch" class="headerlink" title="git checkout -b new_branch"></a>git checkout -b new_branch</h3><ul>
<li>Checkout and create a branch at the same time. </li>
</ul>
<h2 id="git_rm__26lt_3Bfile_26gt_3B"><a href="#git_rm__26lt_3Bfile_26gt_3B" class="headerlink" title="git rm &lt;file&gt;"></a>git rm <code>&lt;file&gt;</code></h2><p>Not only remove the actual files from disk, but will also stage the removal of the files for us.</p>
<h3 id="git_rm_-r_folder"><a href="#git_rm_-r_folder" class="headerlink" title="git rm -r folder"></a>git rm -r folder</h3><ul>
<li>Recursively remove all folders and files from the given directory.</li>
</ul>
<h2 id="git_merge__26lt_3Bbranch_26gt_3B"><a href="#git_merge__26lt_3Bbranch_26gt_3B" class="headerlink" title="git merge &lt;branch&gt;"></a>git merge <code>&lt;branch&gt;</code></h2><p>Merge your changes from the given branch into current branch.</p>
<h3 id="Merge_Conflicts"><a href="#Merge_Conflicts" class="headerlink" title="Merge Conflicts"></a>Merge Conflicts</h3><ul>
<li>Merge Conflicts can occur when changes are made to a file at the same time. Reading more on <a href="http://git-scm.com/docs/git-merge#_how_conflicts_are_presented" target="_blank" rel="external">how conflicts are presented</a>.</li>
</ul>
<h2 id="Delete_Branch"><a href="#Delete_Branch" class="headerlink" title="Delete Branch"></a>Delete Branch</h2><h3 id="git_branch_-d__26lt_3Bbranch_26gt_3B"><a href="#git_branch_-d__26lt_3Bbranch_26gt_3B" class="headerlink" title="git branch -d &lt;branch&gt;"></a>git branch -d <code>&lt;branch&gt;</code></h3><ul>
<li>Delete a local branch. <code>-d</code> won’t let you delete something that hasn’t been merged.</li>
</ul>
<h3 id="f_and_-D"><a href="#f_and_-D" class="headerlink" title="-f and -D"></a><code>-f</code> and <code>-D</code></h3><ul>
<li>Force delete the branch that hasn’t been merged. </li>
</ul>
<blockquote>
<p>Add the <code>-f</code>(–force) option or use <code>-D</code> which combines <code>-d -f</code> together into one command.</p>
</blockquote>
<h3 id="Delete_Remote_Branch"><a href="#Delete_Remote_Branch" class="headerlink" title="Delete Remote Branch"></a>Delete Remote Branch</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d &lt;remote <span class="property">name</span>&gt;/&lt;branch <span class="property">name</span>&gt;</span><br><span class="line">git push &lt;remote <span class="property">name</span>&gt;: &lt;branch <span class="property">name</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">branch </span>-r -d origin/<span class="keyword">branch-name</span><br><span class="line"></span><span class="label">git</span> <span class="keyword">push </span>origin :<span class="keyword">branch-name</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。<br>笔记基本上整理自网站 <a href="https://try.github.io">Try Git</a>，一套很不错的 Git 在线入门教程。</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://cocoawill.com/tags/Git/"/>
    
      <category term="自用笔记" scheme="http://cocoawill.com/categories/%E8%87%AA%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
      <category term="术业专攻" scheme="http://cocoawill.com/categories/%E8%87%AA%E7%94%A8%E7%AC%94%E8%AE%B0/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://cocoawill.com/2015/12/24/blog-building/"/>
    <id>http://cocoawill.com/2015/12/24/blog-building/</id>
    <published>2015-12-24T02:15:40.000Z</published>
    <updated>2015-12-24T02:15:39.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://cocoawill.com/tags/CSS/"/>
    
      <category term="GitHub" scheme="http://cocoawill.com/tags/GitHub/"/>
    
      <category term="HTML" scheme="http://cocoawill.com/tags/HTML/"/>
    
      <category term="Hexo" scheme="http://cocoawill.com/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://cocoawill.com/tags/JavaScript/"/>
    
      <category term="Markdown" scheme="http://cocoawill.com/tags/Markdown/"/>
    
      <category term="WordPress" scheme="http://cocoawill.com/tags/WordPress/"/>
    
      <category term="HelloWorld" scheme="http://cocoawill.com/categories/HelloWorld/"/>
    
  </entry>
  
</feed>
